README for cliapp
=================

cliapp is a Python framework for Unix-like command line programs,
which typically have the following characteristics:

* non-interactive
* the programs read input files, or the standard input
* each line of input is processed individually
* output is to the standard output
* there are various options to modify how the program works
* certain options are common to all: --help, --version

Programs like the above are often used as _filters_ in a pipeline.
The scaffoling to set up a command line parser, open each input
file, read each line of input, etc, is the same in each program.
Only the logic of what to do with each line differs.

cliapp is not restricted to line-based filters, but is a more
general framework. It provides ways for its users to override
most behavior. For example:

* you can treat command line arguments as URLs, or record identfiers
  in a database, or whatever you like
* you can read input files in whatever chunks you like, or not at all,
  rather than forcing a line-based paradigm

There are plans to support plugins, configuration files, logging, etc,
as well. Despite all the flexibility, writing simple line-based filters
will remain very straightforward. The point is to get the framework to
do all the usual things, and avoid repeating code across users of the
framework.


Example
-------

See the file `example.py` for an example of how to use the framework.


Walkthrough
-----------

Every application should be a class that subclasses `cliapp.Application`.
The subclass should provide specific methods. Read the documentation
for the `cliapp.Application` class to see all methods, but a rough
summary is here:

* the `settings` attribute is the `cliapp.Settings` instance used by
  the application
* override `add_settings` to add new settings for the application
* override `process_*` methods to override various stages in how
  arguments and input files are processed
* override `process_args` to decide how each argument is processed;
  by default, this called `process_inputs`
* `process_inputs` calls `process_input` (note singular) for each 
  argument, or on `-` to process standard input if no files are named
  on the command line
* `process_input` calls `open_input` to open each file, then calls
  `process_input_line` for each input line
* `process_input_line` does nothing, by default

This cascade of overrideable methods is started by the `run`
method, which also sets up logging, loads configuration files,
parses the command line, and handles reporting of exceptions.
It can also run the rest of the code under the Python profiler,
if the appropriate environment variable is set.


Legalese
--------

Copyright 2011  Lars Wirzenius

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
 
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

